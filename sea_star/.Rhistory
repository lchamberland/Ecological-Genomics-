2+2
2+2
3^2 -2
summary airTemp
airTemp <- c(32,34,35,37,39,40)
summary airTemp
summary(airTemp)
plot(x=airTemp, y=batAbundance)
batAbundance <- c(100,104,98,132,138,150)
plot(x=airTemp, y=batAbundance)
example("plot")
summary(airTemp)
summary(batAbundance)
myModel <- lm(batAbundance~airTemp)
summary(myModel)
plot(x=airTemp,y=batAbundance,xlab="Air Temperature (F)",ylab="Bat Abundance",pch=21,bg="goldenrod",cex=1.5)
grid()
albine(myModel)
abline(myModel)
rm(list=ls())
rm(list=ls())
randomNumbers <- runif(100)
summary(randomNumbers)
plot(randomNumbers, type="o")
plot(randomNumbers, type="o", bg=goldenrod)
plot(randomNumbers, type="o", bg="goldenrod")
3^2 - 2
airTemp <- c(32,34,35,37,39,40)
print(airTemp)
print(aritemp)
summary(airTemp)
batAbundance <- c(100,104,98,132,138,150)
summary(batAbundance)
plot(x=airTemp, y=batAbundance)
plot(x=airTemp, y=batAbundance, type="o")
example("plot")
install.packages("ggplot")
install.packages("phyloch")
install.packages("phyloch")
install.packages("phyloclim")
install.packages("phyloch")
setRepositories()
install.packages("ggplot")
install.packages("PopGenome")
source("https://bioconductor.org/biocLite.R")
biocLite("RNASeqPower")
quit
---
```{r eval=F}
source("https://bioconductor.org/biocLite.R")
biocLite("RNASeqPower")
plot(rep2, type='b', col="blue", xlab="Effect size (fold change)",ylab="Power",ylim=c(0,1), lty=2)
rep2<-rnapower(depth=10, n=2, cv=0.2, effect=c(1.5, 2, 2.5, 4), alpha=.05)
rep2<-rnapower(depth=10, n=2, cv=0.2, effect=c(1.5, 2, 2.5, 4), alpha=.05)
source("https://bioconductor.org/biocLite.R")
biocLite("RNASeqPower")
library(RNASeqPower)
rep2<-rnapower(depth=10, n=2, cv=0.2, effect=c(1.5, 2, 2.5, 4), alpha=.05)
plot(rep2, type='b', col="blue", xlab="Effect size (fold change)",ylab="Power",ylim=c(0,1), lty=2)
rep3<-rnapower(depth=10, n=3, cv=0.2, effect=c(1.5, 2, 2.5, 4), alpha=.05)
points(rep3, type='b', col="purple", lty=2)
rep5<-rnapower(depth=10, n=5, cv=0.2, effect=c(1.5, 2, 2.5, 4), alpha=.05)
points(rep5, type='b', col="green", lty=2)
rep10<-rnapower(depth=10, n=10, cv=0.2, effect=c(1.5, 2, 2.5, 4), alpha=.05)
points(rep10, type='b', col="red", lty=2)
rep2V<-rnapower(depth=10, n=2, cv=0.6, effect=c(1.5, 2, 2.5, 4), alpha=.05)
points(rep2V, type='b', col="blue")
rep3V<-rnapower(depth=10, n=3, cv=0.6, effect=c(1.5, 2, 2.5, 4), alpha=.05)
points(rep3V, type='b', col="purple")
rep5V<-rnapower(depth=10, n=5, cv=0.6, effect=c(1.5, 2, 2.5, 4), alpha=.05)
points(rep5V, type='b', col="green")
rep10V<-rnapower(depth=10, n=10, cv=0.6, effect=c(1.5, 2, 2.5, 4), alpha=.05)
points(rep10V, type='b', col="red")
```
rep2<-rnapower(depth=10, n=2, cv=0.2, effect=c(1.5, 2, 2.5, 4), alpha=.025)
plot(rep2, type='b', col="blue", xlab="Effect size (fold change)",ylab="Power",ylim=c(0,1), lty=2)
rep2<-rnapower(depth=10, n=2, cv=0.2, effect=c(1.5, 2, 2.5, 4), alpha=.05)
plot(rep2, type='b', col="blue", xlab="Effect size (fold change)",ylab="Power",ylim=c(0,1), lty=2)
rep3<-rnapower(depth=10, n=3, cv=0.2, effect=c(1.5, 2, 2.5, 4), alpha=.05)
points(rep3, type='b', col="purple", lty=2)
rep5<-rnapower(depth=10, n=5, cv=0.2, effect=c(1.5, 2, 2.5, 4), alpha=.05)
points(rep5, type='b', col="green", lty=2)
rep10<-rnapower(depth=10, n=10, cv=0.2, effect=c(1.5, 2, 2.5, 4), alpha=.05)
points(rep10, type='b', col="red", lty=2)
rep2V<-rnapower(depth=10, n=2, cv=0.6, effect=c(1.5, 2, 2.5, 4), alpha=.05)
points(rep2V, type='b', col="blue")
rep3V<-rnapower(depth=10, n=3, cv=0.6, effect=c(1.5, 2, 2.5, 4), alpha=.05)
points(rep3V, type='b', col="purple")
rep5V<-rnapower(depth=10, n=5, cv=0.6, effect=c(1.5, 2, 2.5, 4), alpha=.05)
points(rep5V, type='b', col="green")
rep10V<-rnapower(depth=10, n=10, cv=0.6, effect=c(1.5, 2, 2.5, 4), alpha=.05)
points(rep10V, type='b', col="red")
```
setwd("~/Desktop/Ecological_Genomics /sea_star")
library("DESeq2")
library("ggplot2")
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
View(colData)
intsub <- c("int", "sub")
newdata <- mydata[intsub]
newdata <- colData[intsub]
int <- subset(colData, location==int)
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
int <- subset(colData, location==int)
int <- subset(colData, location=int)
sub <- subset(colData, location=sub)
View(int)
View(sub)
int <- subset(colData, location==int)
int <- subset(colData, location=int)
View(int)
int <- subset(colData,location==int)
View(colData)
int <- subset(colData, location==int)
int <- subset(colData, location=="int")
View(int)
int <- subset(colData, location=="int")
sub <- subset(colData, location=="sub")
dds <- DESeqDataSetFromMatrix(countData = countData, int = int, design = ~ location + health)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("score"))
plotPCA(vsd, intgroup=c("score"))
plotPCA(vsd, intgroup=c("health"))
plotPCA(vsd, intgroup=c("day"))
plotPCA(vsd, intgroup=c("location"))
plotPCA(vsd, intgroup=c("health","location"))
plotPCA(vsd, intgroup=c("int"))
sampleDists <- dist(t(assay(vsd)))
plotMA(res, main="DESeq2", ylim=c(-2,2))
plotPCA(vsd, intgroup=c("int"))
plotPCA(vsd, intgroup=c(int))
plotPCA(vsd, intgroup=c(subset(colData, location=="int")))
plotPCA(vsd, intgroup=cx(colData, location=="int")))
plotPCA(vsd, intgroup=c(colData, location=="int"))
plotPCA(vsd, intgroup=c("int"))
plotPCA(vsd, intgroup=subset(colData, location=="int"))
plotPCA(vsd, data=subset(colData, location=="int"))
plotPCA(vsd, intgroup=subset(colData, location=="int"))
plotPCA(vsd, intgroup=subset(location=="int"))
plotPCA(vsd, intgroup=subset("location"=="int"))
plotPCA(vsd, intgroup=subset(colData, "location"=="int"))
var2 ~ var1, data=subset(dataframe, var3 < 150)
plotPCA(vsd, intgroup=subset(colData, location=="int"))
plotPCA(vsd, intgroup=c("health","location"))
plotPCA(vsd, intgroup=subset(colData, location=="int"))
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
plotPCA(vsd, intgroup=c("score"))
plotPCA(vsd, intgroup=c("health"))
plotPCA(vsd, intgroup=c("day"))
plotPCA(vsd, intgroup=c("location"))
plotPCA(vsd, intgroup=c("health","location"))
plotPCA(vsd, intgroup=subset(colData, location=="int"))
plotPCA(vsd, intgroup=subset(colData, location=="int"))
plotMA(res, main="DESeq2", ylim=c(-2,2))
setwd("~/Desktop/Ecological_Genomics /sea_star")
library("DESeq2")
library("ggplot2")
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
int <- subset(colData, location=="int")
sub <- subset(colData, location=="sub")
View(int)
intcount <- subset(countData, location=="int")
View(countData)
View(sub)
View(int)
View(sub)
View(int)
intcol <- subset(colData, location=="int")
subcol <- subset(colData, location=="sub")
View(intcol)
View(intcol)
View(sub)
dds <- DESeqDataSetFromMatrix(countData = countData, intcol = intcol, design = ~ location + health)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
intcol <- conds[conds$Location == "int",)
head(intcol)
dim(intcol)
subcol <- subset(colData, location=="sub")
#################### MODEL NUMBER 1: TEST EFFECT OF HEALTH CONTROLLING FOR LOCATION
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
# In this typical model, the "health effect" represents the overall effect of health status
# controlling for differences due to location page 26-27 manual DESeq2.pdf
# The last term in the model is what is tested.  In this case health. You need to rearrange the order
# of the factors in the model to test for the overall effect of a diff. factor.
# This is not the same as an interaction.
dim(dds)
#[1] 13053    77
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#[1] 12954    77  # at > 100; we loose many fewer genes
# For practice, let's work with fewer genes so that the models can run faster...
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S")) #sets that "healthy is the reference
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$padj),]
head(res)
# log2 fold change (MAP): health S vs H
# Wald test p-value: health S vs H
# DataFrame with 6 rows and 6 columns
# baseMean log2FoldChange     lfcSE
# <numeric>      <numeric> <numeric>
#   TRINITY_DN46709_c0_g1_TRINITY_DN46709_c0_g1_i2_g.23139_m.23139   95.58364       2.916172 0.5141065
# TRINITY_DN45370_c1_g1_TRINITY_DN45370_c1_g1_i1_g.19244_m.19244  326.18876       1.495569 0.2910832
# TRINITY_DN45983_c5_g1_TRINITY_DN45983_c5_g1_i3_g.20837_m.20837 1292.39567       1.514289 0.2904796
# TRINITY_DN44127_c0_g1_TRINITY_DN44127_c0_g1_i1_g.16286_m.16286  250.18334       2.081641 0.4477985
# TRINITY_DN45492_c0_g1_TRINITY_DN45492_c0_g1_i5_g.19587_m.19587  276.71581       1.706664 0.3722197
# TRINITY_DN46924_c3_g1_TRINITY_DN46924_c3_g1_i1_g.23942_m.23942  253.74577       1.146243 0.2648761
# stat           pvalue
# <numeric>        <numeric>
#   TRINITY_DN46709_c0_g1_TRINITY_DN46709_c0_g1_i2_g.23139_m.23139  5.672312 0.00000001408832
# TRINITY_DN45370_c1_g1_TRINITY_DN45370_c1_g1_i1_g.19244_m.19244  5.137942 0.00000027776334
# TRINITY_DN45983_c5_g1_TRINITY_DN45983_c5_g1_i3_g.20837_m.20837  5.213065 0.00000018574588
# TRINITY_DN44127_c0_g1_TRINITY_DN44127_c0_g1_i1_g.16286_m.16286  4.648611 0.00000334177720
# TRINITY_DN45492_c0_g1_TRINITY_DN45492_c0_g1_i5_g.19587_m.19587  4.585099 0.00000453770438
# TRINITY_DN46924_c3_g1_TRINITY_DN46924_c3_g1_i1_g.23942_m.23942  4.327470 0.00001508320259
# padj
# <numeric>
#   TRINITY_DN46709_c0_g1_TRINITY_DN46709_c0_g1_i2_g.23139_m.23139 0.000006001624
# TRINITY_DN45370_c1_g1_TRINITY_DN45370_c1_g1_i1_g.19244_m.19244 0.000039442394
# TRINITY_DN45983_c5_g1_TRINITY_DN45983_c5_g1_i3_g.20837_m.20837 0.000039442394
# TRINITY_DN44127_c0_g1_TRINITY_DN44127_c0_g1_i1_g.16286_m.16286 0.000355899272
# TRINITY_DN45492_c0_g1_TRINITY_DN45492_c0_g1_i5_g.19587_m.19587 0.000386612413
# TRINITY_DN46924_c3_g1_TRINITY_DN46924_c3_g1_i1_g.23942_m.23942 0.001070907384
summary(res)
# out of 1199 with nonzero total read count
# adjusted p-value < 0.1
# LFC > 0 (up)     : 27, 2.3%
# LFC < 0 (down)   : 14, 1.2%
# outliers [1]     : 31, 2.6%
# low counts [2]   : 743, 62%
# (mean count < 25)
#################### MODEL NUMBER 2 - INTERACTIONS
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health + location:health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S"))  #sets that "healthy is the reference
dds <- DESeq(dds, parallel=T)
resultsNames(dds)
# [1]  "Intercept"           "location_sub_vs_int" "health_S_vs_H"       "locationsub.healthS"
res <- results(dds, name="locationsub.healthS")
res <- res[order(res$padj),]
head(res)
# log2 fold change (MLE): locationsub.healthS
# Wald test p-value: locationsub.healthS
# DataFrame with 6 rows and 6 columns
# baseMean log2FoldChange     lfcSE
# <numeric>      <numeric> <numeric>
#   TRINITY_DN43786_c1_g1_TRINITY_DN43786_c1_g1_i1_g.15493_m.15493   123.80304      -3.271111 0.6262268
# TRINITY_DN42353_c0_g2_TRINITY_DN42353_c0_g2_i1_g.12717_m.12717 17014.16856       1.440676 0.2997342
# TRINITY_DN47127_c0_g1_TRINITY_DN47127_c0_g1_i3_g.24653_m.24653   264.88795      -1.391774 0.3537203
# TRINITY_DN41442_c3_g5_TRINITY_DN41442_c3_g5_i1_g.11211_m.11211    17.70835      -8.254507 2.0651380
# TRINITY_DN32007_c0_g2_TRINITY_DN32007_c0_g2_i1_g.4284_m.4284      10.50286      -8.011341 2.1704831
# TRINITY_DN28600_c0_g1_TRINITY_DN28600_c0_g1_i1_g.3312_m.3312      30.50985      -5.613068 1.5277455
# stat          pvalue
# <numeric>       <numeric>
#   TRINITY_DN43786_c1_g1_TRINITY_DN43786_c1_g1_i1_g.15493_m.15493 -5.223524 0.0000001755495
# TRINITY_DN42353_c0_g2_TRINITY_DN42353_c0_g2_i1_g.12717_m.12717  4.806512 0.0000015358622
# TRINITY_DN47127_c0_g1_TRINITY_DN47127_c0_g1_i3_g.24653_m.24653 -3.934674 0.0000833096630
# TRINITY_DN41442_c3_g5_TRINITY_DN41442_c3_g5_i1_g.11211_m.11211 -3.997073 0.0000641304917
# TRINITY_DN32007_c0_g2_TRINITY_DN32007_c0_g2_i1_g.4284_m.4284   -3.691041 0.0002233385194
# TRINITY_DN28600_c0_g1_TRINITY_DN28600_c0_g1_i1_g.3312_m.3312   -3.674086 0.0002387024879
# padj
# <numeric>
#   TRINITY_DN43786_c1_g1_TRINITY_DN43786_c1_g1_i1_g.15493_m.15493 0.0001353486
# TRINITY_DN42353_c0_g2_TRINITY_DN42353_c0_g2_i1_g.12717_m.12717 0.0005920749
# TRINITY_DN47127_c0_g1_TRINITY_DN47127_c0_g1_i3_g.24653_m.24653 0.0160579375
# TRINITY_DN41442_c3_g5_TRINITY_DN41442_c3_g5_i1_g.11211_m.11211 0.0160579375
# TRINITY_DN32007_c0_g2_TRINITY_DN32007_c0_g2_i1_g.4284_m.4284   0.0306732697
# TRINITY_DN28600_c0_g1_TRINITY_DN28600_c0_g1_i1_g.3312_m.3312   0.0306732697
summary(res)
#
# out of 1199 with nonzero total read count
# adjusted p-value < 0.1
# LFC > 0 (up)     : 2, 0.17%
# LFC < 0 (down)   : 10, 0.83%
# outliers [1]     : 35, 2.9%
# low counts [2]   : 394, 33%
# (mean count < 9)
#################### MODEL NUMBER 3 - GROUP DESIGNS can be used for contrasts of interest or interactions
colData$group <- factor(paste0(colData$location, ".", colData$health, ".", colData$score))
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ group)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dds <- dds[sample(nrow(dds), 1200), ]
dim(dds)
dds <- DESeq(dds, parallel=T)
intcol <- conds[conds$Location == "int",]
head(intcol)
dim(intcol)
intcol <- conds[conds$Location == "int",]
head(intcol)
dim(intcol)
subcol <- conds[conds$Location == "sub",]
head(intcol)
dim(intcol)
View(intcol)
View(subcol)
View(sub)
View(intcol)
View(int)
int <- subset(colData, location=="int")
sub <- subset(colData, location=="sub")
View(int)
View(sub)
View(sub)
View(countsTable)
View(intcol)
View(sub)
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
int <- subset(colData, location=="int")
sub <- subset(colData, location=="sub")
View(int)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ location + health)
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("score"))
plotPCA(vsd, intgroup=c("health"))
plotPCA(vsd, intgroup=c("day"))
plotPCA(vsd, intgroup=c("location"))
plotPCA(vsd, intgroup=c("health","location"))
plotPCA(vsd, intgroup=subset(colData, location=="int"))
plotPCA(vsd, intgroup=subset(colData, location=="sub"))
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S")) #sets that "healthy is the reference
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$padj),]
head(res)
summary(res)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, int = int, design = ~ health)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, int = "int", design = ~ health)
x[intersect(location$int, location$sub),]
location[intersect(location$int, location$sub),]
library("DESeq2")
library("ggplot2")
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
colDataINT<-subset(colData, colData$location=="int")
colDataSUB<-subset(colData, colData$location=="sub")
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
countDataINT<-countData[, which(colnames(countData) %in% row.names(colDataINT))]
countDataSUB<-countData[, -which(colnames(countData) %in% row.names(colDataINT))]
dim(countDataINT)
dim(countDataSUB)
ddsINT <- DESeqDataSetFromMatrix(countDataINT = countDataINT, colDataINT = colDataINT, design = ~ health)
countsTable <- read.delim('countsdata_trim2.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
countDataINT<-countData[, which(colnames(countData) %in% row.names(colDataINT))]
countDataSUB<-countData[, -which(colnames(countData) %in% row.names(colDataINT))]
dim(countDataINT)
dim(countDataSUB)
ddsINT <- DESeqDataSetFromMatrix(countDataINT = countDataINT, colDataINT = colDataINT, design = ~ health)
countDataINT<-countData[, which(colnames(countData) %in% row.names(colDataINT))]
View(countDataINT)
ddsINT <- DESeqDataSetFromMatrix(countDataINT = countDataINT, colDataINT = colDataINT, design = ~ health)
ddsINT <- DESeqDataSetFromMatrix(countData = countDataINT, colData = colDataINT, design = ~ health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S")) #sets that "healthy is the reference
ddsINT <- dds[ rowSums(counts(ddsINT)) > 100, ]
dds <- dds[ rowSums(counts(ddsINT)) > 100, ]
dds <- dds[ rowSums(counts(dds)) > 100, ]
ddsINT <- DESeqDataSetFromMatrix(countData = countDataINT, colData = colDataINT, design = ~ health)
dim(ddsINT)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S")) #sets that "healthy is the reference
dds <- DESeq(dds)
dds <- DESeqDataSetFromMatrix(countData = countDataSUB, colData = colDataSUB, design = ~ health)
